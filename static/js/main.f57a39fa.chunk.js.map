{"version":3,"sources":["Table/index.js","App.js","reportWebVitals.js","index.js"],"names":["Table","useState","gridApi","setGridApi","setGridColumnApi","rowData","rowSelectionType","style","padding","onClick","applyTransaction","add","selectedRows","getSelectedRows","remove","className","height","width","onGridReady","params","api","columnApi","rowSelection","sideBar","field","sortable","editable","filter","enableValue","enableRowGroup","checkboxSelection","required","cellRenderer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAKe,SAASA,IACtB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,mBAAS,MAAnD,mBAAsBG,GAAtB,WACA,EAA8BH,mBAAS,MAAvC,mBAAOI,EAAP,KAiCMC,GAjCN,KAiCyB,YAEzB,OACE,gCACE,sBAAKC,MAAO,CAAEC,QAAS,QAAvB,UACE,wBAAQC,QAAS,kBAAMP,EAAQQ,iBAAiB,CAAEC,IAAK,CAAC,OAAxD,qBAGA,wBACEF,QAAS,WACP,IAAMG,EAAeV,EAAQW,kBAC7BX,EAAQQ,iBAAiB,CAAEI,OAAQF,KAHvC,iCASA,+CAEF,sBAAKG,UAAU,kBAAkBR,MAAO,CAAES,OAAQ,IAAKC,MAAO,QAA9D,UACE,eAAC,cAAD,CACEZ,QAASA,EACTa,YArDY,SAACC,GACnBhB,EAAWgB,EAAOC,KAClBhB,EAAiBe,EAAOE,YAoDlBC,aAAchB,EACdiB,SAAS,EAJX,UAME,cAAC,eAAD,CACEC,MAAM,KACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,aAAa,EACbC,gBAAgB,EAChBC,mBAAmB,IAErB,cAAC,eAAD,CACEN,MAAM,OACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,IAEV,cAAC,eAAD,CACEH,MAAM,QACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRI,UAAQ,IAEV,cAAC,eAAD,CACEP,MAAM,SACNQ,aAAa,aACbP,UAAU,EACVC,UAAU,EACVC,QAAQ,IAEV,cAAC,eAAD,CACEH,MAAM,MACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,IAEV,cAAC,eAAD,CACEH,MAAM,UACNC,UAAU,EACVE,QAAQ,EACRD,UAAU,IAEZ,cAAC,eAAD,CACEF,MAAM,OACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,OAGZ,sBAAKZ,UAAU,kBAAkBR,MAAO,CAAES,OAAQ,IAAKC,MAAO,QAA9D,UACE,gDACA,eAAC,cAAD,CACEZ,QAASA,EACTiB,aAAchB,EACdiB,SAAS,EAHX,UAKE,cAAC,eAAD,CACEC,MAAM,KACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,aAAa,EACbC,gBAAgB,EAChBC,mBAAmB,IAErB,cAAC,eAAD,CACEN,MAAM,OACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,IAEV,cAAC,eAAD,CACEH,MAAM,QACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,IAEV,cAAC,eAAD,CACEH,MAAM,SACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,IAEV,cAAC,eAAD,CACEH,MAAM,MACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,IAEV,cAAC,eAAD,CACEH,MAAM,UACNC,UAAU,EACVE,QAAQ,EACRD,UAAU,IAEZ,cAAC,eAAD,CACEF,MAAM,OACNC,UAAU,EACVC,UAAU,EACVC,QAAQ,gBC3JPM,MARf,WACE,OACE,qBAAKlB,UAAU,MAAf,SACE,cAACf,EAAD,OCOSkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f57a39fa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\n\r\nexport default function Table() {\r\n  const [gridApi, setGridApi] = useState([]);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const [rowData, setRowData] = useState(null);\r\n\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    const updateData = (data) => {\r\n      setRowData(data);\r\n    };\r\n  };\r\n  const GenderCell = (props) => {\r\n    const { value } = props;\r\n    const icon = value == \"Male\"; // ? <genderCell/>:<genderCell/>;\r\n    return (\r\n      <div>\r\n        {icon}\r\n        {value}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleChange = ({ target }) => {\r\n    setRowData(target.value);\r\n  };\r\n  const addData = (e) => {\r\n    e.preventDefault();\r\n    console.log(rowData);\r\n    if (rowData != null) {\r\n      const mygridApi = gridApi;\r\n      mygridApi.push(rowData);\r\n      setGridApi(mygridApi);\r\n    }\r\n  };\r\n\r\n  const rowSelectionType = \"multiple\";\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ padding: \"10px\" }}>\r\n        <button onClick={() => gridApi.applyTransaction({ add: [{}] })}>\r\n          Add Row\r\n        </button>\r\n        <button\r\n          onClick={() => {\r\n            const selectedRows = gridApi.getSelectedRows();\r\n            gridApi.applyTransaction({ remove: selectedRows });\r\n          }}\r\n        >\r\n          Delete Selected Row\r\n        </button>\r\n\r\n        <button>Submit</button>\r\n      </div>\r\n      <div className=\"ag-theme-alpine\" style={{ height: 300, width: \"100%\" }}>\r\n        <AgGridReact\r\n          rowData={rowData}\r\n          onGridReady={onGridReady}\r\n          rowSelection={rowSelectionType}\r\n          sideBar={true}\r\n        >\r\n          <AgGridColumn\r\n            field=\"id\"\r\n            sortable={true}\r\n            editable={false}\r\n            filter={true}\r\n            enableValue={true}\r\n            enableRowGroup={true}\r\n            checkboxSelection={true}\r\n          ></AgGridColumn>\r\n          <AgGridColumn\r\n            field=\"Name\"\r\n            sortable={true}\r\n            editable={true}\r\n            filter={true}\r\n          ></AgGridColumn>\r\n          <AgGridColumn\r\n            field=\"Email\"\r\n            sortable={true}\r\n            editable={true}\r\n            filter={true}\r\n            required\r\n          ></AgGridColumn>\r\n          <AgGridColumn\r\n            field=\"Gender\"\r\n            cellRenderer=\"GenderCell\"\r\n            sortable={true}\r\n            editable={true}\r\n            filter={true}\r\n          ></AgGridColumn>\r\n          <AgGridColumn\r\n            field=\"DOB\"\r\n            sortable={true}\r\n            editable={true}\r\n            filter={true}\r\n          ></AgGridColumn>\r\n          <AgGridColumn\r\n            field=\"Country\"\r\n            sortable={true}\r\n            filter={true}\r\n            editable={true}\r\n          ></AgGridColumn>\r\n          <AgGridColumn\r\n            field=\"City\"\r\n            sortable={true}\r\n            editable={true}\r\n            filter={true}\r\n          ></AgGridColumn>\r\n        </AgGridReact>\r\n        <div className=\"ag-theme-alpine\" style={{ height: 200, width: \"100%\" }}>\r\n          <h2>Submitted Data</h2>\r\n          <AgGridReact\r\n            rowData={rowData}\r\n            rowSelection={rowSelectionType}\r\n            sideBar={true}\r\n          >\r\n            <AgGridColumn\r\n              field=\"id\"\r\n              sortable={true}\r\n              editable={false}\r\n              filter={true}\r\n              enableValue={true}\r\n              enableRowGroup={true}\r\n              checkboxSelection={true}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"Name\"\r\n              sortable={true}\r\n              editable={false}\r\n              filter={true}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"Email\"\r\n              sortable={true}\r\n              editable={false}\r\n              filter={true}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"Gender\"\r\n              sortable={true}\r\n              editable={false}\r\n              filter={true}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"DOB\"\r\n              sortable={true}\r\n              editable={false}\r\n              filter={true}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"Country\"\r\n              sortable={true}\r\n              filter={false}\r\n              editable={true}\r\n            ></AgGridColumn>\r\n            <AgGridColumn\r\n              field=\"City\"\r\n              sortable={true}\r\n              editable={false}\r\n              filter={true}\r\n            ></AgGridColumn>\r\n          </AgGridReact>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Table from \"./Table/index\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}